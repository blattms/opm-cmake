from setuptools import setup, find_packages

from setuptools import Extension
from setuptools.command.build_ext import build_ext
import sys
import setuptools

import glob
import os
import re
import subprocess

try:
    from importlib.machinery import EXTENSION_SUFFIXES
    suffix = EXTENSION_SUFFIXES[0]
except ImportError:
    suffix = ".so"

setupdir = os.path.dirname(__file__)
if setupdir != '':
  os.chdir( setupdir )

cc = "@CMAKE_CXX_COMPILER@"
# setuptools will use the first path as the linker.
# This should not be ccache as this will fail.
# CXX is used for linking and CC for compilation
os.environ['CXX'] = cc

try:
    subprocess.call(['ccache', '--version'])
    os.environ['CC'] = 'ccache {}'.format(cc)
    print("Using 'ccache {}' as compiler".format(cc))
except OSError as e:
    os.environ['CC'] = cc
    print('\nNOTE: please install ccache for faster compilation of python bindings.\n')

# This is very hacky but so is the entire setup.py buildsystem.
output=subprocess.check_output([cc, "--version"])
libs=['opmcommon', 'boost_system']
output=str(output)
if output.find('Free Software Foundation'):
    libs.append('stdc++fs')

if 'build' in sys.argv:
    if not 'build_ext' in sys.argv:
        raise TypeError("Missing option 'build_ext'.")

ext_modules = [
    Extension(
        'opm.libopmcommon_python',
        [
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/unit_system.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/connection.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/converters.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/deck.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/deck_keyword.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/eclipse_io.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/field_props.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/eclipse_config.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/eclipse_grid.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/eclipse_state.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/group.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/log.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/parsecontext.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/parser.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/schedule.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/summary_state.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/table_manager.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/well.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/emodel_util.cpp',
                'cxx/builtin_pybind11.cpp',
                '@RELATIVE_PROJECT_SOURCE_DIR@/python/cxx/export.cpp'
        ],
        libraries=libs,
        language='c++',
        undef_macros=["NDEBUG"],
        include_dirs=[@SETUP_PY_PYBIND_INCLUDE_DIR@],
        extra_compile_args=['-std=c++17', '-fopenmp', @SETUP_PY_FMT_FLAGS@],
        extra_link_args=['-fopenmp', @SETUP_PY_LINKAGE@]
    )
]

with open("README.md", "r") as fh:
    long_description = fh.read()

setup(
    name='opm',
    version = '@opm-common_VERSION@' + '@opm-common_PYTHON_PACKAGE_VERSION@',
    url='http://www.opm-project.org',
    author='The Open Porous Media Project',
    author_email='opmuser@gmail.com',
    description='OPM-Common Python bindings',
    long_description=long_description,
    long_description_content_type="text/markdown",
    packages=[
                'opm',
                'opm.io',
                'opm.io.deck',
                'opm.io.ecl_state',
                'opm.io.parser',
                'opm.io.schedule',
                'opm.io.ecl',
                'opm.tools',
                'opm.util'
            ],
    package_dir = {'' : '@RELATIVE_PROJECT_SOURCE_DIR@/python'},
    ext_modules=ext_modules,
    include_package_data=True,
    license='Open Source',
    zip_safe=False,
    test_suite='tests',
    setup_requires=["pytest-runner", 'setuptools_scm'],
    python_requires='>=3.5',
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    ],
)
